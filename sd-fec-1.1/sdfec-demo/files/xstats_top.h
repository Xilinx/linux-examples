// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
//
// ==============================================================

#ifndef XSTATS_TOP_H
#define XSTATS_TOP_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#include <metal/sys.h>
#include <metal/io.h>
#include <metal/irq.h>
#include <metal/atomic.h>
#include <metal/cpu.h>
#include <metal/device.h>
#endif
#include "xstats_top_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef struct {
    struct metal_io_region *Cntrl_BaseAddress;
    struct metal_device *Cntrl_DevicePtr;
    u32 IsReady;
} XStats_top;
#else
typedef struct {
    u16 DeviceId;
    u32 Cntrl_BaseAddress;
} XStats_top_Config;

typedef struct {
    u32 Cntrl_BaseAddress;
    u32 IsReady;
} XStats_top;
#endif

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
} XStats_top_Mask_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XStats_top_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XStats_top_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XStats_top_WriteReg(BaseAddress, RegOffset, Data) \
    metal_io_write32((BaseAddress), (RegOffset), (Data))
#define XStats_top_ReadReg(BaseAddress, RegOffset) \
    metal_io_read32((BaseAddress), (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XStats_top_Initialize(XStats_top *InstancePtr, u16 DeviceId);
XStats_top_Config* XStats_top_LookupConfig(u16 DeviceId);
int XStats_top_CfgInitialize(XStats_top *InstancePtr, XStats_top_Config *ConfigPtr);
#else
int XStats_top_Initialize(XStats_top *InstancePtr, char* BusName, char* DeviceName);
int XStats_top_Release(XStats_top *InstancePtr);
#endif

void XStats_top_Start(XStats_top *InstancePtr);
u32 XStats_top_IsDone(XStats_top *InstancePtr);
u32 XStats_top_IsIdle(XStats_top *InstancePtr);
u32 XStats_top_IsReady(XStats_top *InstancePtr);
void XStats_top_EnableAutoRestart(XStats_top *InstancePtr);
void XStats_top_DisableAutoRestart(XStats_top *InstancePtr);

void XStats_top_Set_k_V(XStats_top *InstancePtr, u32 Data);
u32 XStats_top_Get_k_V(XStats_top *InstancePtr);
void XStats_top_Set_n_V(XStats_top *InstancePtr, u32 Data);
u32 XStats_top_Get_n_V(XStats_top *InstancePtr);
void XStats_top_Set_mask_V(XStats_top *InstancePtr, XStats_top_Mask_v Data);
XStats_top_Mask_v XStats_top_Get_mask_V(XStats_top *InstancePtr);
void XStats_top_Set_num_blocks_V(XStats_top *InstancePtr, u32 Data);
u32 XStats_top_Get_num_blocks_V(XStats_top *InstancePtr);
void XStats_top_Set_src_inc_parity_V(XStats_top *InstancePtr, u32 Data);
u32 XStats_top_Get_src_inc_parity_V(XStats_top *InstancePtr);
u32 XStats_top_Get_raw_berr_V(XStats_top *InstancePtr);
u32 XStats_top_Get_raw_blerr_V(XStats_top *InstancePtr);
u32 XStats_top_Get_cor_berr_V(XStats_top *InstancePtr);
u32 XStats_top_Get_cor_blerr_V(XStats_top *InstancePtr);
u32 XStats_top_Get_iter_cnt_V(XStats_top *InstancePtr);
u32 XStats_top_Get_block_cnt_V(XStats_top *InstancePtr);

void XStats_top_InterruptGlobalEnable(XStats_top *InstancePtr);
void XStats_top_InterruptGlobalDisable(XStats_top *InstancePtr);
void XStats_top_InterruptEnable(XStats_top *InstancePtr, u32 Mask);
void XStats_top_InterruptDisable(XStats_top *InstancePtr, u32 Mask);
void XStats_top_InterruptClear(XStats_top *InstancePtr, u32 Mask);
u32 XStats_top_InterruptGetEnabled(XStats_top *InstancePtr);
u32 XStats_top_InterruptGetStatus(XStats_top *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
